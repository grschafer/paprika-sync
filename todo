/* ex: set tabstop=2 shiftwidth=2: */

left off
========

- fix not being able to debug w/ ipdb
  - runserver wasn't pid 1 in the container, so added 'exec' to start script
- TODO: install sass and watch
  - could take package.json and gulpfile.js from cookiecutter-django to mimic if I had answered YES to using a js_task_runner...
  - but just going to brew install sass and run it in --watch mode outside docker, for now
  - `sass --watch sass/project.scss css/project.css`
  - TODO: figure out sass with compressor for production deployment
- making /add-paprika-account view and form
  - form shows up, but formatting is bad
  - handle form submission and call actions.import_account
  - test error cases (bad credentials, can't reach paprika API, etc.)
  - redirect first-login to add-paprika-account
  - test large number of recipes (does import need to be async somehow?)
    - too slow
      - ideas: multiprocessing pool, celery, every-minute cronjob
      - do every-minute cronjob... simplest while still performant
  - create newsitem on new account import
  - add basic newsfeed to homepage
  - fix logging config (no log statements or prints show in docker)
- no failure count, b/c should give user immediate feedback if they requested the import and it fails
- TODO: make sync-ing functionality work
  - mgmt command to regularly sync all accounts
  - create new Recipe if new uid and if hash differs for existing uid
  - produce NewsItem for any diffs, additions, deletions
  - cronjob script to sync every minute, but lockfile first
    - test lockfile in linux bash
  - add "force-sync" button to UI (in navbar?)
    - make this just change a field on PaprikaAccount (sync_status? requested, inprogress, done) that an every minute cronjob checks?
    - diagram state changes
    - TODO: test state changes
      - TODO: test unique constraint on PaprikaAccount.username and alias
    - disallow any model changes til import/sync completes...
      - looked at using django-fsm ConcurrentTransitionMixin, but it doesn't seem like a great answer because I can't sensibly expose an in-progress state outside of the given transaction so that cronjobs can read it (ConcurrentTransitionMixin requires that you save changes in an atomic block, which means that I'd be wrapping all my save calls in an atomic block... guess that could work)
    - add last_synced field to PaprikaAccount
- move actions to methods on PaprikaAccount
- TODO: fix RecipeSerializer... complaining about image_url being invalid url and photo_hash being null
  - sometimes image_url points to a local, on-device url? is this the default image?
  - how to handle that paprika images are only accessible for a few minutes? cache them all on my own server?
    - JUST REMOVE all queryparams (Signature, Expires, AWSAccessKeyId) and it still works
- add all other fields to recipe model
- TODO: fetch categories when fetching recipes (do this in RecipeSerializer if it can't find a matching category in the database?)
- TODO: make recipe list view
- TODO: make recipe detail view
- TODO: make recipe diff view
- TODO: make diff accounts view
- TODO: deploy and share
- TODO: figure out how to update recipes (do they get a new uid? or just an updated hash?)
- TODO: add clone recipe (i.e. copy a recipe you don't have at all)
  - TODO: how to handle missing categories in destination account?
- TODO: add update recipe (i.e. update your recipe with changes they've made)


general
=======

to start local server: docker-compose -f local.yml up

to continuously re-compile sass: sass --watch paprika_sync/static/sass/project.scss paprika_sync/static/css/project.css

to run tests: docker-compose -f local.yml run django pytest paprika_sync/core

see bashin.sh for docker commands (e.g. running a shell)

see tasks here: https://github.com/grschafer/paprika-sync/projects/1

to force rebuild the container...
    force rebuild: docker-compose build django
    or delete the image: docker rmi -f paprika_sync_local_django
